/*
 *
 * Copyright(c) 2010,2011 ACCESS CO., LTD. All rights reserved.
 *
 */

/**
@file ../WKC/WebKit/WKC/webkit/WKCWebFrame.h
*/
/*@{*/
/**
@cond WKC_PRIVATE_DOCUMENT
@class WKC::WKCSecurityOrigin; 
@brief (TBD) implement description
@endcond
*/
/**
@cond WKC_PRIVATE_DOCUMENT
@class WKC::WKCNetworkResponse; 
@brief ネットワークのレスポンスを保持するクラス。
@endcond
*/
/**
@class WKC::WKCWebFrame 
@brief フレームに相当するクラス。
*/
/**
@fn  static WKCWebFrame* WKC::WKCWebFrame::create(WKCWebView* view, WKCClientBuilders& builders)
@brief ウェブフレームの生成。
@param "WKCWebView* view" ウェブビューへのポインタ
@param "WKCClientBuilders& builders" WKCClientBuildersへの参照
@retval WKCWebFrame* ウェブフレームへのポインタ
@details
::WKCWebFrameを作成し、そのポインタを返す。
@attention
生成されたウェブフレームを破棄する場合は、 WKC::WKCWebFrame::deleteWKCWebFrame() を呼び出すこと。
*/
/**
@fn  static WKCWebFrame* WKC::WKCWebFrame::create(WKCWebViewPrivate* view, WKCClientBuilders& builders, WKC::HTMLFrameOwnerElement* ownerelement=0)
@brief ウェブフレームの生成。
@param "WKCWebViewPrivate* view" WKCWebViewPrivateへのポインタ
@param "WKCClientBuilders& builders" WKCClientBuildersへの参照
@param  "WKC::HTMLFrameOwnerElement* ownerelement=0" オーナ要素へのポインタ
@retval WKCWebFrame* ウェブフレームへのポインタ
@details
(TBD) implement description 
@attention
生成されたウェブフレームを破棄する場合は、 WKC::WKCWebFrame::deleteWKCWebFrame() を呼び出すこと。
*/
/**
@fn  static void WKC::WKCWebFrame::deleteWKCWebFrame(WKCWebFrame* self)
@brief ウェブフレームの破棄。
@param "WKCWebFrame* self" ウェブフレームへのポインタ。
@return なし
@details
WKC::WKCWebFrame::create() で生成されたウェブフレームを破棄する。
*/
/**
@fn  WKC::Frame* WKC::WKCWebFrame::core() const
@brief ウェブコアの取得。
@retval "WKC::Frame*" WKC::Frameへのポインタ
*/
/**
@fn  WKCWebView* WKC::WKCWebFrame::webView()
@brief ウェブビューの取得。
@retval "WKCWebView*" ウェブビューへのポインタ
*/
/**
@fn  const unsigned short* WKC::WKCWebFrame::name()
@brief 名前の取得。
@retval "const unsigned short*" 名前の文字列へのポインタ
*/
/**
@fn  const unsigned short* WKC::WKCWebFrame::title()
@brief タイトルの取得。
@retval "const unsigned short*" タイトル文字列へのポインタ
*/
/**
@fn  const char* WKC::WKCWebFrame::uri()
@brief URIの取得。
@retval "const char*" URI文字列へのポインタ
*/
/**
@fn  WKCWebFrame* WKC::WKCWebFrame::parent()
@brief 親のウェブフレームの取得。
@retval WKCWebFrame* 親のウェブフレームへのポインタ
*/
/**
@fn  void WKC::WKCWebFrame::loadURI(const char* uri)
@brief ページの取得。
@param "const char* uri" URI文字列へのポインタ
@return なし
*/
/**
@fn  void WKC::WKCWebFrame::loadString(const char* content, const unsigned short* mime_type, const unsigned short* encoding, const char *base_uri, const char *unreachable_uri=0)
@brief ページの取得。
@param "const char* content" コンテンツの文字列へのポインタ
@param "const unsigned short* mime_type" マイムタイプの文字列へのポインタ
@param "const unsigned short* encoding" エンコードタイプの文字列へのポインタ
@param "const char* base_uri" 基底URI文字列へのポインタ
@param "const char* unreachable_uri" エラーコンテンツURI文字列へのポインタ
@return なし
*/
/**
@fn  void WKC::WKCWebFrame::loadRequest(WKCNetworkRequest *request)
@brief ページの取得。
@param "WKCNetworkRequest *request" WKCNetworkRequestへのポインタ
@return なし
*/
/**
@fn  void WKC::WKCWebFrame::stopLoading()
@brief ページの取得の中止。
@return なし
*/
/**
@fn  void WKC::WKCWebFrame::reload()
@brief ページの再取得。
@return なし
*/
/**
@fn  WKCWebFrame* WKC::WKCWebFrame::findFrame(const unsigned short* name)
@brief フレームの検索。
@param "const unsigned short* name" 名前の文字列へのポインタ
@retval WKCWebFrame* ウェブフレームへのポインタ
*/
/**
@fn  JSGlobalContextRef WKC::WKCWebFrame::globalContext()
@brief JavaScriptのグローバルコンテキストの取得。
@retval JSGlobalContextRef グローバルコンテキストへの参照
*/
/**
@fn  WKC::LoadStatus WKC::WKCWebFrame::loadStatus()
@brief ページ取得状態の取得。
@retval WKC::LoadStatus ページ取得状態
*/
/**
@fn  WKC::ScrollbarMode WKC::WKCWebFrame::horizontalScrollbarMode()
@brief 水平スクロールバーの設定の取得。
@retval "WKC::ScrollbarMode" (TBD) implement description 
*/
/**
@fn  WKC::ScrollbarMode WKC::WKCWebFrame::verticalScrollbarMode()
@brief 垂直スクロールバーの設定の取得。
@retval "WKC::ScrollbarMode" (TBD) implement description 
*/
/**
@fn  WKCWebDataSource* WKC::WKCWebFrame::dataSource()
@brief ウェブデータソースの取得。
@retval "WKCWebDataSource*" (TBD) implement description 
*/
/**
@cond WKC_PRIVATE_DOCUMENT
@fn  WKCWebDataSource* WKC::WKCWebFrame::provisionalDataSource()
@brief (TBD) implement description
@return (TBD) implement description 
@endcond
*/
/**
@cond WKC_PRIVATE_DOCUMENT
@fn  WKCSecurityOrigin* WKC::WKCWebFrame::securityOrigin()
@brief (TBD) implement description
@return (TBD) implement description 
@endcond
*/
/**
@cond WKC_PRIVATE_DOCUMENT
@fn  WKCNetworkResponse* WKC::WKCWebFrame::networkResponse()
@brief ネットワークのレスポンス結果の取得。
@retval WKCNetworkResponse*  (TBD) implement description 
@endcond
*/
/**
@fn  const char* WKC::WKCWebFrame::faviconURL()
@brief Favicon URL の取得。
@retval 0以外 Favicon URL 文字列（NULL終端つき）へのポインタ
@retval 0 Favicon が存在しない
*/
/**
@fn  bool WKC::WKCWebFrame::getFaviconInfo(WKCFaviconInfo* info)
@brief Favicon 情報の取得。
@param "WKCFaviconInfo* info" WKC::WKCFaviconInfo_ 構造体へのポインタ
@retval !false 成功
@retval false Favicon が存在しない
@details
アプリケーションは FrameLoaderClientWKC::dispatchDidReceiveIcon のタイミング
にて、このAPIをコールすることで、Favicon 情報を取得する。
また、 WKC::WKCFaviconInfo_ 構造体に、メモリ確保が必要なメンバー（fIconData、
fIconBmpData、fIconBmpMask）はアプリケーションにて確保すること。そのため、本 API
を2回コールする必要がある。@n
1回目のコールは、各メモリのサイズ関連情報を取得し、アプリケーションは必要なメモリ領域
を確保してから2回目のコールを行うこと。@n
必要なメモリ領域サイズ情報詳細は WKC::WKCFaviconInfo_ を参照のこと。
@attention
1回目のコールでは、 WKC::WKCFaviconInfo_ 構造体メンバーを 0 初期化する必要がある。
*/
/**
@fn  bool WKC::WKCWebFrame::contentSerializeStart()
@brief ページ保存処理開始。
@retval !false 成功
@retval false 失敗
@details
WKC::WKCWebFrame::contentSerializeStart が失敗した場合、
WKC::WKCWebFrame::contentSerializeProgress を呼び出さないこと。
*/
/**
@fn  int WKC::WKCWebFrame::contentSerializeProgress(void* buffer, unsigned int length)
@brief 保存ページデータのシリアライズ。
@param "void* buffer" シリアライズデータを格納するバッファへのポインタ（アプリ側でメモリ確保を行うこと）
@param "unsigned int length" バッファのサイズ
@retval >0 buffer==0 の場合、ページ保存に必要なメモリサイズを返す。@n
           buffer!=0 の場合、ページ保存に必要なデータをコピーし、コピーしたデータのサイズ（バイト）を返す。
@retval ==0 シリアライズ完了
@retval <0 シリアライズ失敗
@details
シリアライズした保存ページデータを buffer に格納し、そのサイズを戻り値で返す。
戻り値 0 が返るまで本APIを呼び出すことにより、保存ページデータを buffer 単位で分
割してファイルに出力することができる。
*/
/**
@fn  void WKC::WKCWebFrame::contentSerializeEnd()
@brief ページ保存処理完了。
@return なし
@details
WKC::WKCWebFrame::contentSerializeProgress の戻り値は ==0 か <0 の場合、本 API
を呼び出し、ページ保存を完了すること。
*/
/**
@fn  bool WKC::WKCWebFrame::isPageArchiveLoadFailed()
@brief 保存ページ読み込み処理で、エラーが発生したかを確認。
@retval !false エラーが発生した
@retval false エラーが発生していないか、保存ページ読み込み処理ではない
@details
WKC::FrameLoaderClientWKC::dispatchDidFinishLoad が通知されたタイミングにて、
アプリケーションは本APIを呼び出し、保存ページ読み込み処理エラー発生したかどうかを確認し、
エラーが発生した場合、アプリケーションは後の遷移履歴へ移動を行うこと。
*/
/**
@cond WKC_PRIVATE_DOCUMENT
@fn  WKC::WKCWebFrame::WKCWebFrame()
@brief コンストラクタ
@endcond
*/
/**
@cond WKC_PRIVATE_DOCUMENT
@fn  bool WKC::WKCWebFrame::construct(WKCWebViewPrivate* view, WKCClientBuilders& builders, WKC::HTMLFrameOwnerElement* ownerelement)
@brief (TBD) implement description
@param "WKCWebViewPrivate* view" (TBD) implement description
@param "WKCClientBuilders& builders" (TBD) implement description
@param "WKC::HTMLFrameOwnerElement* ownerelement" (TBD) implement description
@retval !false 成功
@retval false 失敗
@endcond
*/
/*@}*/
