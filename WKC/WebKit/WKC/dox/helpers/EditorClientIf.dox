/*
 *
 * Copyright(c) 2011 ACCESS CO., LTD. All rights reserved.
 *
 */

/**
@file ../WKC/WebKit/WKC/helpers/EditorClientIf.h
*/
/*@{*/
/**
@class WKC::EditorClientIf 
@brief ページへの編集のイベントを通知するクラス。
*/
/**
@fn  static EditorClientIf* WKC::EditorClientIf::create(WKCWebViewPrivate*)
@brief エディタークライアントの生成。 
@param WKCWebViewPrivate* WKCWebViewPrivateへのポインタ
@retval EditorClientIf* エディタークライアントへのポインタ
*/
/**
@fn  WKC::EditorClientIf::~EditorClientIf()
@brief デストラクタ。
*/
/**
@cond WKC_PRIVATE_DOCUMENT
@fn  virtual void WKC::EditorClientIf::pageDestroyed()
@brief (TBD) implement description
@return (TBD) implement description 
@endcond
*/
/**
@cond WKC_PRIVATE_DOCUMENT
@fn  virtual bool WKC::EditorClientIf::shouldDeleteRange(WKC::Range*)
@brief (TBD) implement description
@param WKC::Range* (TBD) implement description
@return (TBD) implement description 
@endcond
*/
/**
@cond WKC_PRIVATE_DOCUMENT
@fn  virtual bool WKC::EditorClientIf::shouldShowDeleteInterface(WKC::HTMLElement*)
@brief (TBD) implement description
@param WKC::HTMLElement* (TBD) implement description
@return (TBD) implement description 
@endcond
*/
/**
@cond WKC_PRIVATE_DOCUMENT
@fn  virtual bool WKC::EditorClientIf::smartInsertDeleteEnabled()
@brief (TBD) implement description
@return (TBD) implement description 
@endcond
*/
/**
@cond WKC_PRIVATE_DOCUMENT
@fn  virtual bool WKC::EditorClientIf::isSelectTrailingWhitespaceEnabled()
@brief (TBD) implement description
@return (TBD) implement description 
@endcond
*/
/**
@cond WKC_PRIVATE_DOCUMENT
@fn  virtual bool WKC::EditorClientIf::isContinuousSpellCheckingEnabled()
@brief (TBD) implement description
@return (TBD) implement description 
@endcond
*/
/**
@cond WKC_PRIVATE_DOCUMENT
@fn  virtual void WKC::EditorClientIf::toggleContinuousSpellChecking()
@brief (TBD) implement description
@return (TBD) implement description 
@endcond
*/
/**
@cond WKC_PRIVATE_DOCUMENT
@fn  virtual bool WKC::EditorClientIf::isGrammarCheckingEnabled()
@brief (TBD) implement description
@return (TBD) implement description 
@endcond
*/
/**
@cond WKC_PRIVATE_DOCUMENT
@fn  virtual void WKC::EditorClientIf::toggleGrammarChecking()
@brief (TBD) implement description
@return (TBD) implement description 
@endcond
*/
/**
@cond WKC_PRIVATE_DOCUMENT
@fn  virtual int WKC::EditorClientIf::spellCheckerDocumentTag()
@brief (TBD) implement description
@return (TBD) implement description 
@endcond
*/
/**
@cond WKC_PRIVATE_DOCUMENT
@fn  virtual bool WKC::EditorClientIf::isEditable()
@brief (TBD) implement description
@return (TBD) implement description 
@endcond
*/
/**
@cond WKC_PRIVATE_DOCUMENT
@fn  virtual bool WKC::EditorClientIf::shouldBeginEditing(WKC::Range*)
@brief (TBD) implement description
@param WKC::Range* (TBD) implement description
@return (TBD) implement description 
@endcond
*/
/**
@cond WKC_PRIVATE_DOCUMENT
@fn  virtual bool WKC::EditorClientIf::shouldEndEditing(WKC::Range*)
@brief (TBD) implement description
@param WKC::Range* (TBD) implement description
@return (TBD) implement description 
@endcond
*/
/**
@cond WKC_PRIVATE_DOCUMENT
@fn  virtual bool WKC::EditorClientIf::shouldInsertNode(WKC::Node*, WKC::Range*, WKC::EditorInsertAction)
@brief (TBD) implement description
@param WKC::Node* (TBD) implement description
@return (TBD) implement description 
@endcond
*/
/**
@cond WKC_PRIVATE_DOCUMENT
@fn  virtual bool WKC::EditorClientIf::shouldInsertText(const WKC::String&, WKC::Range*, WKC::EditorInsertAction)
@brief (TBD) implement description
@param WKC::String& (TBD) implement description
@param  WKC::Range* (TBD) implement description
@return (TBD) implement description 
@endcond
*/
/**
@fn  virtual bool WKC::EditorClientIf::shouldChangeSelectedRange(WKC::Range* fromRange, WKC::Range* toRange, WKC::EAffinity, bool stillSelecting)
@brief 選択範囲変更の可否確認
@param "WKC::Range* fromRange" 変更前の選択範囲
@param "WKC::Range* toRange" 新しい選択範囲
@param  WKC::EAffinity 範囲変更の方向
@param "bool stillSelecting" 選択状態
@retval !false 変更可
@retval false 変更不可
@details
!falseを返すと、選択範囲変更後に ::WKC::EditorClientIf::respondToChangedSelection() が呼び出される。
*/
/**
@cond WKC_PRIVATE_DOCUMENT
@fn  virtual bool WKC::EditorClientIf::shouldApplyStyle(WKC::CSSStyleDeclaration*, WKC::Range*)
@brief (TBD) implement description
@param WKC::CSSStyleDeclaration* (TBD) implement description
@return (TBD) implement description 
@endcond
*/
/**
@cond WKC_PRIVATE_DOCUMENT
@fn  virtual bool WKC::EditorClientIf::shouldMoveRangeAfterDelete(WKC::Range*, WKC::Range*)
@brief (TBD) implement description
@param WKC::Range* (TBD) implement description
@return (TBD) implement description 
@endcond
*/
/**
@cond WKC_PRIVATE_DOCUMENT
@fn  virtual void WKC::EditorClientIf::didBeginEditing()
@brief (TBD) implement description
@return (TBD) implement description 
@endcond
*/
/**
@cond WKC_PRIVATE_DOCUMENT
@fn  virtual void WKC::EditorClientIf::respondToChangedContents()
@brief (TBD) implement description
@return (TBD) implement description 
@endcond
*/
/**
@fn  virtual void WKC::EditorClientIf::respondToChangedSelection()
@brief 選択範囲変更の通知
@return なし
@details
文字選択範囲の変更や文字入力のキャレット位置の変更が行われたタイミングで通知される。
インラインでの文字入力を行わない場合は、本関数内で文字入力アプリケーションを起動する必要がある。
詳細は、@ref bbb-textinputを参照。
@attention
WKC::EditorClientIf::shouldChangeSelectedRange() で戻り値に!falseを指定しないと本関数は呼び出されない。
*/
/**
@cond WKC_PRIVATE_DOCUMENT
@fn  virtual void WKC::EditorClientIf::didEndEditing()
@brief (TBD) implement description
@return (TBD) implement description 
@endcond
*/
/**
@cond WKC_PRIVATE_DOCUMENT
@fn  virtual void WKC::EditorClientIf::didWriteSelectionToPasteboard()
@brief (TBD) implement description
@return (TBD) implement description 
@endcond
*/
/**
@cond WKC_PRIVATE_DOCUMENT
@fn  virtual void WKC::EditorClientIf::didSetSelectionTypesForPasteboard()
@brief (TBD) implement description
@return (TBD) implement description 
@endcond
*/
/**
@cond WKC_PRIVATE_DOCUMENT
@fn  virtual void WKC::EditorClientIf::registerCommandForUndo(WTF::PassRefPtr<WKC::EditCommand>)
@brief (TBD) implement description
@param WTF::PassRefPtr<WKC::EditCommand> (TBD) implement description
@return (TBD) implement description 
@endcond
*/
/**
@cond WKC_PRIVATE_DOCUMENT
@fn  virtual void WKC::EditorClientIf::registerCommandForRedo(WTF::PassRefPtr<WKC::EditCommand>)
@brief (TBD) implement description
@param WTF::PassRefPtr<WKC::EditCommand> (TBD) implement description
@return (TBD) implement description 
@endcond
*/
/**
@cond WKC_PRIVATE_DOCUMENT
@fn  virtual void WKC::EditorClientIf::clearUndoRedoOperations()
@brief (TBD) implement description
@return (TBD) implement description 
@endcond
*/
/**
@cond WKC_PRIVATE_DOCUMENT
@fn  virtual bool WKC::EditorClientIf::canUndo() const
@brief (TBD) implement description
@return (TBD) implement description 
@endcond
*/
/**
@cond WKC_PRIVATE_DOCUMENT
@fn  virtual bool WKC::EditorClientIf::canRedo() const
@brief (TBD) implement description
@return (TBD) implement description 
@endcond
*/
/**
@cond WKC_PRIVATE_DOCUMENT
@fn  virtual void WKC::EditorClientIf::undo()
@brief (TBD) implement description
@return (TBD) implement description 
@endcond
*/
/**
@cond WKC_PRIVATE_DOCUMENT
@fn  virtual void WKC::EditorClientIf::redo()
@brief (TBD) implement description
@return (TBD) implement description 
@endcond
*/
/**
@cond WKC_PRIVATE_DOCUMENT
@fn  virtual void WKC::EditorClientIf::handleKeyboardEvent(WKC::WKCKeyEvent*)
@brief (TBD) implement description
@param WKC::WKCKeyEvent* (TBD) implement description
@return (TBD) implement description 
@endcond
*/
/**
@cond WKC_PRIVATE_DOCUMENT
@fn  virtual void WKC::EditorClientIf::handleInputMethodKeydown(WKC::WKCKeyEvent*)
@brief (TBD) implement description
@param WKC::WKCKeyEvent* (TBD) implement description
@return (TBD) implement description 
@endcond
*/
/**
@cond WKC_PRIVATE_DOCUMENT
@fn  virtual void WKC::EditorClientIf::textFieldDidBeginEditing(WKC::Element*)
@brief (TBD) implement description
@param WKC::Element* (TBD) implement description
@return (TBD) implement description 
@endcond
*/
/**
@cond WKC_PRIVATE_DOCUMENT
@fn  virtual void WKC::EditorClientIf::textFieldDidEndEditing(WKC::Element*)
@brief (TBD) implement description
@param WKC::Element* (TBD) implement description
@return (TBD) implement description 
@endcond
*/
/**
@cond WKC_PRIVATE_DOCUMENT
@fn  virtual void WKC::EditorClientIf::textDidChangeInTextField(WKC::Element*)
@brief (TBD) implement description
@param WKC::Element* (TBD) implement description
@return (TBD) implement description 
@endcond
*/
/**
@cond WKC_PRIVATE_DOCUMENT
@fn  virtual bool WKC::EditorClientIf::doTextFieldCommandFromEvent(WKC::Element*, WKC::WKCKeyEvent*)
@brief (TBD) implement description
@param WKC::Element* (TBD) implement description
@return (TBD) implement description 
@endcond
*/
/**
@cond WKC_PRIVATE_DOCUMENT
@fn  virtual void WKC::EditorClientIf::textWillBeDeletedInTextField(WKC::Element*)
@brief (TBD) implement description
@param WKC::Element* (TBD) implement description
@return (TBD) implement description 
@endcond
*/
/**
@cond WKC_PRIVATE_DOCUMENT
@fn  virtual void WKC::EditorClientIf::textDidChangeInTextArea(WKC::Element*)
@brief (TBD) implement description
@param WKC::Element* (TBD) implement description
@return (TBD) implement description 
@endcond
*/
/**
@cond WKC_PRIVATE_DOCUMENT
@fn  virtual void WKC::EditorClientIf::ignoreWordInSpellDocument(const WKC::String&)
@brief (TBD) implement description
@param WKC::String& (TBD) implement description
@return (TBD) implement description 
@endcond
*/
/**
@cond WKC_PRIVATE_DOCUMENT
@fn  virtual void WKC::EditorClientIf::learnWord(const WKC::String&)
@brief (TBD) implement description
@param WKC::String& (TBD) implement description
@return (TBD) implement description 
@endcond
*/
/**
@cond WKC_PRIVATE_DOCUMENT
@fn  virtual void WKC::EditorClientIf::checkSpellingOfString(const UChar*, int length, int* misspellingLocation, int* misspellingLength)
@brief (TBD) implement description
@param UChar* (TBD) implement description
@param length (TBD) implement description
@param misspellingLocation (TBD) implement description
@param misspellingLength (TBD) implement description
@return (TBD) implement description 
@endcond
*/
/**
@cond WKC_PRIVATE_DOCUMENT
@fn  virtual WKC::String WKC::EditorClientIf::getAutoCorrectSuggestionForMisspelledWord(const WKC::String&)
@brief (TBD) implement description
@param WKC::String& (TBD) implement description
@return (TBD) implement description 
@endcond
*/
/**
@cond WKC_PRIVATE_DOCUMENT
@fn  virtual void WKC::EditorClientIf::checkGrammarOfString(const UChar*, int length, WTF::Vector<WKC::GrammarDetail>&, int* badGrammarLocation, int* badGrammarLength)
@brief (TBD) implement description
@param UChar* (TBD) implement description
@param length (TBD) implement description
@param  WTF::Vector<WKC::GrammarDetail>& (TBD) implement description
@return (TBD) implement description 
@endcond
*/
/**
@cond WKC_PRIVATE_DOCUMENT
@fn  virtual void WKC::EditorClientIf::updateSpellingUIWithGrammarString(const WKC::String&, const WKC::GrammarDetail&)
@brief (TBD) implement description
@param WKC::String& (TBD) implement description
@param WKC::GrammarDetail& (TBD) implement description
@return (TBD) implement description 
@endcond
*/
/**
@cond WKC_PRIVATE_DOCUMENT
@fn  virtual void WKC::EditorClientIf::updateSpellingUIWithMisspelledWord(const WKC::String&)
@brief (TBD) implement description
@param WKC::String& (TBD) implement description
@return (TBD) implement description 
@endcond
*/
/**
@cond WKC_PRIVATE_DOCUMENT
@fn  virtual void WKC::EditorClientIf::showSpellingUI(bool show)
@brief (TBD) implement description
@param show (TBD) implement description
@return (TBD) implement description 
@endcond
*/
/**
@cond WKC_PRIVATE_DOCUMENT
@fn  virtual bool WKC::EditorClientIf::spellingUIIsShowing()
@brief (TBD) implement description
@return (TBD) implement description 
@endcond
*/
/**
@cond WKC_PRIVATE_DOCUMENT
@fn  virtual void WKC::EditorClientIf::getGuessesForWord(const WKC::String&, WTF::Vector<WKC::String>& guesses)
@brief (TBD) implement description
@param WKC::String& (TBD) implement description
@param guesses (TBD) implement description
@return (TBD) implement description 
@endcond
*/
/**
@cond WKC_PRIVATE_DOCUMENT
@fn  virtual void WKC::EditorClientIf::setInputMethodState(bool enabled)
@brief (TBD) implement description
@param enabled (TBD) implement description
@return (TBD) implement description 
@endcond
*/
/**
@fn  WKC::EditorClientIf::EditorClientIf(WKCWebViewPrivate*)
@brief (TBD) implement description
@param WKCWebViewPrivate* (TBD) implement description
*/
/**
@fn  bool WKC::EditorClientIf::construct()
@brief (TBD) implement description
@return (TBD) implement description 
*/
/*@}*/
